{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * **ANDROID** - Privacy setting for how the notification should be shown on the lockscreen of Android 5+ devices.\n */\nimport * as ɵngcc0 from '@angular/core';\nexport var OSLockScreenVisibility = /*#__PURE__*/(() => {\n  (function (OSLockScreenVisibility) {\n    /**\n     * Fully visible (default)\n     */\n    OSLockScreenVisibility[OSLockScreenVisibility[\"Public\"] = 1] = \"Public\";\n    /**\n     * Contents are hidden\n     */\n    OSLockScreenVisibility[OSLockScreenVisibility[\"Private\"] = 0] = \"Private\";\n    /**\n     * Not shown\n     */\n    OSLockScreenVisibility[OSLockScreenVisibility[\"Secret\"] = -1] = \"Secret\";\n  })(OSLockScreenVisibility || (OSLockScreenVisibility = {}));\n  return OSLockScreenVisibility;\n})();\n/**\n * How the notification was displayed to the user. Part of OSNotification. See inFocusDisplaying for more information on how this is used.\n */\nexport var OSDisplayType = /*#__PURE__*/(() => {\n  (function (OSDisplayType) {\n    /**\n     * notification is silent, or inFocusDisplaying is disabled.\n     */\n    OSDisplayType[OSDisplayType[\"None\"] = 0] = \"None\";\n    /**\n     * (**DEFAULT**) - native alert dialog display.\n     */\n    OSDisplayType[OSDisplayType[\"InAppAlert\"] = 1] = \"InAppAlert\";\n    /**\n     * native notification display.\n     */\n    OSDisplayType[OSDisplayType[\"Notification\"] = 2] = \"Notification\";\n  })(OSDisplayType || (OSDisplayType = {}));\n  return OSDisplayType;\n})();\nexport var OSActionType = /*#__PURE__*/(() => {\n  (function (OSActionType) {\n    OSActionType[OSActionType[\"Opened\"] = 0] = \"Opened\";\n    OSActionType[OSActionType[\"ActionTake\"] = 1] = \"ActionTake\";\n  })(OSActionType || (OSActionType = {}));\n  return OSActionType;\n})();\nvar OneSignal = /** @class */function (_super) {\n  __extends(OneSignal, _super);\n  function OneSignal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * constants to use in inFocusDisplaying()\n     * @hidden\n     */\n    _this.OSInFocusDisplayOption = {\n      None: 0,\n      InAppAlert: 1,\n      Notification: 2\n    };\n    return _this;\n  }\n  OneSignal.prototype.startInit = function (appId, googleProjectNumber) {\n    return cordova(this, \"startInit\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.handleNotificationReceived = function () {\n    return cordova(this, \"handleNotificationReceived\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.handleNotificationOpened = function () {\n    return cordova(this, \"handleNotificationOpened\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.handleInAppMessageClicked = function () {\n    return cordova(this, \"handleInAppMessageClicked\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.iOSSettings = function (settings) {\n    return cordova(this, \"iOSSettings\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  OneSignal.prototype.endInit = function () {\n    return cordova(this, \"endInit\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.promptForPushNotificationsWithUserResponse = function () {\n    return cordova(this, \"promptForPushNotificationsWithUserResponse\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  OneSignal.prototype.getTags = function () {\n    return cordova(this, \"getTags\", {}, arguments);\n  };\n  OneSignal.prototype.getIds = function () {\n    return cordova(this, \"getIds\", {}, arguments);\n  };\n  OneSignal.prototype.sendTag = function (key, value) {\n    return cordova(this, \"sendTag\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.sendTags = function (json) {\n    return cordova(this, \"sendTags\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.deleteTag = function (key) {\n    return cordova(this, \"deleteTag\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.deleteTags = function (keys) {\n    return cordova(this, \"deleteTags\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.registerForPushNotifications = function () {\n    return cordova(this, \"registerForPushNotifications\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.enableVibrate = function (enable) {\n    return cordova(this, \"enableVibrate\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.enableSound = function (enable) {\n    return cordova(this, \"enableSound\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.inFocusDisplaying = function (displayOption) {\n    return cordova(this, \"inFocusDisplaying\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.setSubscription = function (enable) {\n    return cordova(this, \"setSubscription\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.getPermissionSubscriptionState = function () {\n    return cordova(this, \"getPermissionSubscriptionState\", {}, arguments);\n  };\n  OneSignal.prototype.postNotification = function (notificationObj) {\n    return cordova(this, \"postNotification\", {}, arguments);\n  };\n  OneSignal.prototype.cancelNotification = function (notificationId) {\n    return cordova(this, \"cancelNotification\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.promptLocation = function () {\n    return cordova(this, \"promptLocation\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.syncHashedEmail = function (email) {\n    return cordova(this, \"syncHashedEmail\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.setLogLevel = function (logLevel) {\n    return cordova(this, \"setLogLevel\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.setLocationShared = function (shared) {\n    return cordova(this, \"setLocationShared\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.addPermissionObserver = function () {\n    return cordova(this, \"addPermissionObserver\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.addSubscriptionObserver = function () {\n    return cordova(this, \"addSubscriptionObserver\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.setEmail = function (email, emailAuthToken) {\n    return cordova(this, \"setEmail\", {}, arguments);\n  };\n  OneSignal.prototype.logoutEmail = function () {\n    return cordova(this, \"logoutEmail\", {}, arguments);\n  };\n  OneSignal.prototype.addEmailSubscriptionObserver = function () {\n    return cordova(this, \"addEmailSubscriptionObserver\", {\n      \"observable\": true\n    }, arguments);\n  };\n  OneSignal.prototype.clearOneSignalNotifications = function () {\n    return cordova(this, \"clearOneSignalNotifications\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.setRequiresUserPrivacyConsent = function (required) {\n    return cordova(this, \"setRequiresUserPrivacyConsent\", {}, arguments);\n  };\n  OneSignal.prototype.provideUserConsent = function (granted) {\n    return cordova(this, \"provideUserConsent\", {}, arguments);\n  };\n  OneSignal.prototype.userProvidedPrivacyConsent = function (callback) {\n    return cordova(this, \"userProvidedPrivacyConsent\", {}, arguments);\n  };\n  OneSignal.prototype.setExternalUserId = function (externalId) {\n    return cordova(this, \"setExternalUserId\", {}, arguments);\n  };\n  OneSignal.prototype.removeExternalUserId = function () {\n    return cordova(this, \"removeExternalUserId\", {}, arguments);\n  };\n  OneSignal.prototype.addTrigger = function (key, value) {\n    return cordova(this, \"addTrigger\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.addTriggers = function (triggers) {\n    return cordova(this, \"addTriggers\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.removeTriggerForKey = function (key) {\n    return cordova(this, \"removeTriggerForKey\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.removeTriggersForKeys = function (keys) {\n    return cordova(this, \"removeTriggersForKeys\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.prototype.getTriggerValueForKey = function (key) {\n    return cordova(this, \"getTriggerValueForKey\", {}, arguments);\n  };\n  OneSignal.prototype.pauseInAppMessages = function (pause) {\n    return cordova(this, \"pauseInAppMessages\", {\n      \"sync\": true\n    }, arguments);\n  };\n  OneSignal.pluginName = \"OneSignal\";\n  OneSignal.plugin = \"onesignal-cordova-plugin\";\n  OneSignal.pluginRef = \"plugins.OneSignal\";\n  OneSignal.repo = \"https://github.com/OneSignal/OneSignal-Cordova-SDK\";\n  OneSignal.platforms = [\"Amazon Fire OS\", \"Android\", \"iOS\", \"Windows\"];\n  OneSignal.ɵfac = /*@__PURE__*/function () {\n    var ɵOneSignal_BaseFactory;\n    return function OneSignal_Factory(t) {\n      return (ɵOneSignal_BaseFactory || (ɵOneSignal_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(OneSignal)))(t || OneSignal);\n    };\n  }();\n  OneSignal.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OneSignal,\n    factory: function (t) {\n      return OneSignal.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return OneSignal;\n}(IonicNativePlugin);\nexport { OneSignal };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}