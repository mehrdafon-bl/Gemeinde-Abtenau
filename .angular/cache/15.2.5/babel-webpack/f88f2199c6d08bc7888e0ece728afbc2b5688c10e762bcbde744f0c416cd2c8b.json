{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpClient } from '@angular/common/http';\nimport { LoadingController, Platform } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { ToastController } from '@ionic/angular';\nimport { InAppBrowser } from '@awesome-cordova-plugins/in-app-browser/ngx';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@awesome-cordova-plugins/in-app-browser/ngx\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, loadingController, toastController, iab, platform) {\n      this.http = http;\n      this.loadingController = loadingController;\n      this.toastController = toastController;\n      this.iab = iab;\n      this.platform = platform;\n      this.loadingAnimationText = 'Daten werden geladen';\n      this.toastApiErrorText = 'Ein Fehler ist aufgetreten. ' + 'Bitte überprüfen Sie die Internetverbindung oder versuchen Sie es später noch ein mal.';\n      this.websiteUrl = 'https://abtenau.web7.mehrdafon.com';\n      this.apiUrl = this.websiteUrl + '/api';\n      this.inAppBrowserOptionsAndroid = {\n        allowInlineMediaPlayback: 'yes',\n        beforeload: 'yes',\n        clearcache: 'yes',\n        cleardata: 'yes',\n        clearsessioncache: 'yes',\n        closebuttoncaption: '×',\n        closebuttoncolor: '#ffffff',\n        footer: 'no',\n        footercolor: '#00649c',\n        hardwareback: 'yes',\n        hidden: 'no',\n        hidenavigationbuttons: 'yes',\n        hideurlbar: 'yes',\n        lefttoright: 'no',\n        location: 'yes',\n        mediaPlaybackRequiresUserAction: 'yes',\n        navigationbuttoncolor: '#ffffff',\n        shouldPauseOnSuspend: 'yes',\n        toolbarcolor: '#00649c',\n        useWideViewPort: 'yes',\n        zoom: 'yes'\n      };\n      this.inAppBrowserOptionsiOS = {\n        allowInlineMediaPlayback: 'yes',\n        closebuttoncaption: '×',\n        closebuttoncolor: '#ffffff',\n        disallowoverscroll: 'yes',\n        enableViewportScale: 'yes',\n        hidenavigationbuttons: 'yes',\n        hidespinner: 'no',\n        lefttoright: 'no',\n        location: 'no',\n        navigationbuttoncolor: '#ffffff',\n        toolbar: 'yes',\n        toolbarcolor: '#00649c',\n        toolbarposition: 'bottom',\n        usewkwebview: 'yes'\n      };\n    }\n    get(url, showLoading = true) {\n      if (showLoading) {\n        this.showLoading();\n      }\n      const returnObservable = new Observable(observer => {\n        const httpObserver = this.http.get(this.apiUrl + url);\n        httpObserver.subscribe(data => {\n          if (showLoading) {\n            this.loadingAnimation.dismiss();\n          }\n          observer.next(data);\n        }, error => {\n          if (showLoading) {\n            this.loadingAnimation.dismiss();\n          }\n          this.showToastApiError();\n          observer.error(error);\n        });\n      });\n      return returnObservable;\n    }\n    showLoading() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.loadingAnimation = yield this.loadingController.create({\n          message: this.loadingAnimationText,\n          duration: 4000\n        });\n        yield this.loadingAnimation.present();\n      });\n    }\n    showToastApiError() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message: this.toastApiErrorText,\n          position: 'bottom',\n          duration: 3000\n        });\n        toast.present();\n      });\n    }\n    openUrl(url) {\n      if (url.indexOf('.pdf') > -1 && this.platform.is('android')) {\n        this.inAppBrowserOptionsAndroid.zoom = 'no';\n        this.iab.create(this.apiUrl + '/pdf/web/viewer.html?file=' + url, '_blank', this.inAppBrowserOptionsAndroid);\n      } else if (this.platform.is('ios')) {\n        this.iab.create(url, '_blank', this.inAppBrowserOptionsiOS);\n      } else {\n        this.iab.create(url, '_blank', this.inAppBrowserOptionsAndroid);\n      }\n    }\n  }\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoadingController), i0.ɵɵinject(i2.ToastController), i0.ɵɵinject(i3.InAppBrowser), i0.ɵɵinject(i2.Platform));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}